https://onlinejudge.org/external/7/p748.pdf
//小數點越界補 0
//trim 前後 0(去掉多餘 0)

#include <bits/stdc++.h>
using namespace std;

// 大數字串乘法  (只處理不含小數點的非負整數字串)
string mul(string a, string b) {
    vector<int> v(a.size() + b.size(), 0);
    for (int i = a.size() - 1; i >= 0; i--)
        for (int j = b.size() - 1; j >= 0; j--) {
            int x = (a[i] - '0') * (b[j] - '0');
            x += v[i + j + 1];
            v[i + j + 1] = x % 10;
            v[i + j] += x / 10;
        }
    string s;
    for (int x : v) if (!(s.empty() && x == 0)) s += char('0' + x);
    return s.empty() ? "0" : s;
}

int main() {
    string R;
    int n;

    while (cin >> R >> n) {
        // 1. 去小數點
        int d = 0;
        string A;
        for (char c : R) {
            if (c == '.') continue;
            A += c;
        }
        // 計算原先小數位數
        int pos = R.find('.');
        if (pos != string::npos) d = R.size() - pos - 1;

        // 2. 做 n 次大數乘法
        string ans = "1";
        for (int i = 0; i < n; i++) ans = mul(ans, A);

        // 3. 小數點應該在 d*n 位
        int decimal = d * n;
        if (decimal >= ans.size()) {
            ans = string(decimal - ans.size(), '0') + ans;
        }

        if (decimal > 0) {
            ans.insert(ans.end() - decimal, '.');
        }

        // 4. 去除前導 0、尾端 0 與多餘小數點
        while (ans.size() > 1 && ans[0] == '0' && ans[1] != '.') ans.erase(ans.begin());
        while (ans.size() > 1 && ans.back() == '0') ans.pop_back();
        if (ans.back() == '.') ans.pop_back();

        cout << ans << "\n";
    }
    return 0;
}
